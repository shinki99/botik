import os
import random
import logging
from datetime import datetime
import asyncio
import schedule
import time
from dotenv import load_dotenv
from telegram import Bot, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.request import HTTPXRequest
from tarot_data import TAROT_CARDS

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/tarot_bot/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')

if not TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
if not CHANNEL_ID:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_CHANNEL_ID –≤ —Ñ–∞–π–ª–µ .env")

logger.info(f"‚úì –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN[:10]}...")
logger.info(f"‚úì ID –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID}")

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
request = HTTPXRequest(
    http_version="1.1",
    connection_pool_size=100,
    read_timeout=30,
    write_timeout=30,
    connect_timeout=30,
    pool_timeout=30
)
bot = Bot(token=TOKEN, request=request)

def get_russian_month():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    months = {
        1: '—è–Ω–≤–∞—Ä—è',
        2: '—Ñ–µ–≤—Ä–∞–ª—è',
        3: '–º–∞—Ä—Ç–∞',
        4: '–∞–ø—Ä–µ–ª—è',
        5: '–º–∞—è',
        6: '–∏—é–Ω—è',
        7: '–∏—é–ª—è',
        8: '–∞–≤–≥—É—Å—Ç–∞',
        9: '—Å–µ–Ω—Ç—è–±—Ä—è',
        10: '–æ–∫—Ç—è–±—Ä—è',
        11: '–Ω–æ—è–±—Ä—è',
        12: '–¥–µ–∫–∞–±—Ä—è'
    }
    return months[datetime.now().month]

def get_moon_phase():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã"""
    moon_phases = ['üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ', 'üåí –†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', 'üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', 
                  'üåî –†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', 'üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 'üåñ –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞',
                  'üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', 'üåò –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞']
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ñ–∞–∑—ã –ª—É–Ω—ã
    current_date = datetime.now()
    days_since_new_moon = (current_date - datetime(2000, 1, 6)).days
    moon_age = days_since_new_moon % 29.53
    phase_index = int((moon_age / 29.53) * 8) % 8
    
    return moon_phases[phase_index]

async def get_tarot_image():
    """–ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¢–∞—Ä–æ"""
    tarot_images = [
        "https://raw.githubusercontent.com/rws-cards-api/rws-cards-api/master/public/cards/back.jpg",
        "https://raw.githubusercontent.com/rws-cards-api/rws-cards-api/master/public/cards/background.jpg"
    ]
    return random.choice(tarot_images)

async def generate_daily_reading():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ"""
    # –í—ã–±–∏—Ä–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã
    cards = random.sample(list(TAROT_CARDS.items()), 3)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    current_date = datetime.now()
    date_str = f"{current_date.day} {get_russian_month()} {current_date.year}"
    moon_phase = get_moon_phase()
    current_hour = current_date.hour
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–Ω—è
    if current_hour < 12:
        time_of_day = "üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ"
    elif current_hour < 18:
        time_of_day = "üåû –î–Ω–µ–≤–Ω–æ–µ"
    else:
        time_of_day = "üåô –í–µ—á–µ—Ä–Ω–µ–µ"
    
    message = f"üîÆ *{time_of_day} –≥–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ* üîÆ\n"
    message += f"üìÖ {date_str}\n"
    message += f"{moon_phase}\n\n"
    
    positions = ["–ü—Ä–æ—à–ª–æ–µ ‚èÆ", "–ù–∞—Å—Ç–æ—è—â–µ–µ ‚è∫", "–ë—É–¥—É—â–µ–µ ‚è≠"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    images = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–∞—Ä–æ
    tarot_image = await get_tarot_image()
    images.append(InputMediaPhoto(media=tarot_image, caption=message, parse_mode=ParseMode.MARKDOWN))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö
    for (card_name, card_info), position in zip(cards, positions):
        message += f"*{position}*: üé¥ _{card_name}_\n"
        message += f"üìù {card_info['meaning']}\n"
        message += f"‚ö° –°—Ç–∏—Ö–∏—è: {card_info['element']}\n"
        message += f"üî¢ –ß–∏—Å–ª–æ: {card_info['number']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        if 'image_url' in card_info:
            images.append(InputMediaPhoto(media=card_info['image_url']))
    
    message += "‚ú® *–°–æ–≤–µ—Ç –¥–Ω—è*:\n"
    message += f"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É '{cards[1][0]}' –≤ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ - {cards[1][1]['meaning']}\n\n"
    
    message += "üåü *–û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞*:\n"
    message += f"–≠–Ω–µ—Ä–≥–∏–∏ –ø—Ä–æ—à–ª–æ–≥–æ ({cards[0][0]}) –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ ({cards[1][0]}), "
    message += f"–Ω–∞–ø—Ä–∞–≤–ª—è—è –≤–∞—Å –∫ –±—É–¥—É—â–µ–º—É ({cards[2][0]}). "
    message += "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –∫–∞—Ä—Ç –∏ –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏.\n\n"
    
    message += "#–¢–∞—Ä–æ–ù–∞–î–µ–Ω—å #–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å #–ì–∞–¥–∞–Ω–∏–µ #–¢–∞—Ä–æ"
    
    return message, images

async def post_reading():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–¥–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∞–¥–∞–Ω–∏–µ...")
        message, images = await generate_daily_reading()
        logger.info("‚úì –ì–∞–¥–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        await asyncio.sleep(2)
        
        logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}...")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.send_media_group(
                chat_id=CHANNEL_ID,
                media=images
            )
            logger.info("‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        except Exception as img_error:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {img_error}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await asyncio.sleep(2)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
        
        logger.info("‚úÖ –ì–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–¥–∞–Ω–∏—è: {str(e)}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")

async def send_startup_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        await post_reading()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è: {str(e)}")

def run_schedule():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
    try:
        asyncio.run(post_reading())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    print("ü§ñ –ë–æ—Ç –¥–ª—è –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –¢–∞—Ä–æ –∑–∞–ø—É—â–µ–Ω")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ...")
    asyncio.run(send_startup_message())
    print("‚úÖ –ü–µ—Ä–≤–æ–µ –≥–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule.every().day.at("09:00").do(run_schedule)  # –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
    schedule.every().day.at("15:35").do(run_schedule)  # –î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç
    schedule.every().day.at("15:40").do(run_schedule)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç
    schedule.every().day.at("18:00").do(run_schedule)  # –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç
    schedule.every().day.at("23:00").do(run_schedule)  # –ù–æ—á–Ω–æ–π –ø–æ—Å—Ç
    
    print("\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å:")
    print("   ‚Ä¢ 09:00 - –£—Ç—Ä–µ–Ω–Ω–µ–µ –≥–∞–¥–∞–Ω–∏–µ")
    print("   ‚Ä¢ 15:35 - –î–Ω–µ–≤–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ")
    print("   ‚Ä¢ 15:40 - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–Ω–µ–≤–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ")
    print("   ‚Ä¢ 18:00 - –í–µ—á–µ—Ä–Ω–µ–µ –≥–∞–¥–∞–Ω–∏–µ")
    print("   ‚Ä¢ 23:00 - –ù–æ—á–Ω–æ–µ –≥–∞–¥–∞–Ω–∏–µ")
    print("\n‚åõ –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–∞–¥–∞–Ω–∏—è...")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    while True:
        try:
            schedule.run_pending()
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == '__main__':
    main()
